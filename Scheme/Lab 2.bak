#lang racket
;;(power-head 4 3) should return 64



;; (power-tail 4 3) should return 64


;;(third (cons 1(cons 2 (cons 3 (cons 4 (cons 5 empty)))))) should return 3
(define(third l)
  (find l 0))

(define(find l acu)
  (cond
    [(= acu 2) (car l)]
    [else (find (cdr l)(+ acu 1))]))

;;(just-two? (cons 1 empty))

(define(just-two l)
  (cond
   [(= (count l 0) 2) (write "#t")]
   [else (write "#f")]))

(define (count l x)
  (cond
    [(empty? l) x]
    [else (count (cdr l) (+ x 1))]))