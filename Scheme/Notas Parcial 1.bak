#lang racket

;;comments bla bla bla

(define (iterest amount)
  (cond
    [(<= amount 1000) 0.040]
    [(<= amount 5000) 0.045]
    [(<= amount 6000) 0.050]))

(+ 2 3)

(define (sum v b)
  (+ v b))

;; call on lambda
(lambda (v b) (+ v b))

;; sum with lambda
(define suml (lambda (a b)
               (+ a b)))

(define (mult a b)
  (* a b))

(define (square a)
  (expt a 2))


;; lists

;; Makes a list with two elements '( a b )
(define( addlist a b)
  (cons a (cons b empty)))

;; add a element to a list in the begining
(define (add1 a)
  (cond
    [(empty? a) 0]
    [else (+ (car a) (add1 (cdr a)))]))


;; Invert with dots
(define (inv l)
  (cond
    [(empty? l) '()]
    [else (addLast (inv (cdr l))(car l))]))

;; Add last
(define(addLast l x)
  (cond
    [(empty? l)(cons x empty)]
    {else (cons (car l) (addLast (cdr l) x))}))


;; Count elements in list

(define (counter1 l)
  (counter2 l 0))

(define (counter2 l x)
  (cond
    [(empty? l) x]
    [else (counter2 (cdr l) (+ x 1))]))






